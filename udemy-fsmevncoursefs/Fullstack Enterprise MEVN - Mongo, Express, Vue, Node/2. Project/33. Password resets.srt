1
00:00:00,320 --> 00:00:03,810
The first step in the reset password process is the validation.

2
00:00:03,810 --> 00:00:08,900
So we are going to create a new value data called reset password largesse.

3
00:00:08,970 --> 00:00:11,140
I'm going to copy everything and forgot password.

4
00:00:11,160 --> 00:00:13,970
Because we're going to be using some of it first.

5
00:00:14,130 --> 00:00:20,580
This is going to be reset password schema and we are going to actually expect the new password from

6
00:00:20,580 --> 00:00:21,110
the user.

7
00:00:21,450 --> 00:00:27,200
So we'd make sure it's a string with a minimum of six characters on each required.

8
00:00:27,240 --> 00:00:35,730
Then I'm going to wait to reset password schema to make sure it's valid analogy structure out the passport

9
00:00:35,820 --> 00:00:37,590
and the token from the body.

10
00:00:37,590 --> 00:00:43,980
So once we confirm that the user's password is in the request body and it's a minimum of six card us

11
00:00:44,190 --> 00:00:50,760
then we'll proceed to try to find the password reset for this user using the token.

12
00:00:50,760 --> 00:00:58,920
So we are going to say constants existing reset is a weight password that find one and will pass in

13
00:00:59,310 --> 00:01:00,290
the token.

14
00:01:00,390 --> 00:01:06,540
So we are trying to find a password reset whether token is a token we received from the request and

15
00:01:06,540 --> 00:01:12,060
we are going to check if the password we said does not exist then we are going to see invalid reset

16
00:01:12,150 --> 00:01:15,720
Jochen and this is going to go to the password field.

17
00:01:15,840 --> 00:01:22,110
Then if we actually get an existing reset we are going to try to find a user.

18
00:01:22,110 --> 00:01:32,100
So I await user that find one where the email is the existing reset the email and this is how we would

19
00:01:32,100 --> 00:01:36,570
get the authenticated user and then request on user is going to be user.

20
00:01:37,130 --> 00:01:41,020
And then if there are any errors we will return the error that path.

21
00:01:41,040 --> 00:01:43,150
And in this case it's going to be password.

22
00:01:43,350 --> 00:01:51,630
And the message out on message now that we have validated so let's move on to registering to vouch for

23
00:01:51,630 --> 00:01:52,980
the password reset.

24
00:01:53,340 --> 00:02:02,390
So we are going to have off Walter that post passwords reset and we are going to use off controller

25
00:02:02,560 --> 00:02:09,660
the reset password as the controller and we can import our newly created value data reset password very

26
00:02:09,660 --> 00:02:09,930
detail

27
00:02:14,520 --> 00:02:19,070
and use it as a meta where before our consulates code.

28
00:02:19,110 --> 00:02:24,630
Now we'd head over to our controller and make sure we define the reset password method.

29
00:02:24,630 --> 00:02:28,640
We'll make this a sync and I'll pass in reset password.

30
00:02:28,770 --> 00:02:31,440
And how are we going to reset the user's password.

31
00:02:31,440 --> 00:02:40,170
First we are going to find an update the user so I read user that find one and update web.

32
00:02:40,380 --> 00:02:42,590
I would use that email to find a user.

33
00:02:42,720 --> 00:02:49,800
So request that Buddy the user that email is which give us the e-mail of the authenticated user.

34
00:02:50,520 --> 00:02:58,890
So what we want to do is probably get the user from the request OK so that we can just do user the email

35
00:02:59,190 --> 00:03:02,990
and then we need to pass in the fields that we want to update.

36
00:03:03,450 --> 00:03:10,230
And in this case we are going to be updating the password field and this is going to be request that

37
00:03:10,230 --> 00:03:11,760
buddy not password.

38
00:03:12,240 --> 00:03:18,090
But remember that we have to hash the password before saving of detail into the details.

39
00:03:18,090 --> 00:03:20,040
So I'm going to import b create

40
00:03:24,630 --> 00:03:26,790
and we are going to use it to hash the password.

41
00:03:26,830 --> 00:03:33,100
So instead of passing or updating the plain password we are going to assign this to be create that hash

42
00:03:33,190 --> 00:03:38,910
sync and we'll pass in requested buddy that password after updating the user's password.

43
00:03:38,980 --> 00:03:42,060
We need to delete the password reset.

44
00:03:42,100 --> 00:03:53,160
So we are going to see a wait password reset not find one and delete and to find it.

45
00:03:53,170 --> 00:03:54,580
We are going to use that email.

46
00:03:54,790 --> 00:03:56,190
So this is going to be user.

47
00:03:56,190 --> 00:04:01,650
That email then we are finally going to return a response.

48
00:04:01,650 --> 00:04:09,890
The Jason with a message that says password reset successfully.

49
00:04:09,890 --> 00:04:10,280
OK.

50
00:04:10,520 --> 00:04:16,610
So first we update the user's account then we delete the password reset that they use our used so that

51
00:04:16,610 --> 00:04:19,750
the user can for that reset their passwords in future.

52
00:04:19,790 --> 00:04:26,590
And then we reach an adjacent confirmation and also we have to use the password reset model.

53
00:04:26,630 --> 00:04:28,650
So let's try this out.

54
00:04:28,700 --> 00:04:34,490
We are going to type in my new password and click on reset password and we are redirected to the home

55
00:04:34,490 --> 00:04:35,280
page.

56
00:04:35,300 --> 00:04:39,180
Check out the response is a password reset successfully.

57
00:04:39,290 --> 00:04:44,800
Everything works as expected to make sure the password reset was deleted.

58
00:04:44,810 --> 00:04:46,940
We can try to request another password.

59
00:04:46,940 --> 00:04:55,170
We said with my email and we can see that it actually sent the link because the password reset for me

60
00:04:55,170 --> 00:04:56,550
was already deleted.
