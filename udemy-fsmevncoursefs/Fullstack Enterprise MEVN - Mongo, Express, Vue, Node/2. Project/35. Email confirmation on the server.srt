1
00:00:00,270 --> 00:00:04,840
When users are registered they are sent an email to confirm the accounts.

2
00:00:04,900 --> 00:00:08,130
Let's implement the functionality for compelling accounts.

3
00:00:08,130 --> 00:00:12,150
First we are going to have an end point to that request of any detail.

4
00:00:12,300 --> 00:00:14,550
So this is going to be email confirmed.

5
00:00:14,660 --> 00:00:20,610
Jess in order to save us some time I'll copy everything in the log in and paste here.

6
00:00:20,790 --> 00:00:24,590
This is going to be email confirmed schema and to confirm an email.

7
00:00:24,590 --> 00:00:29,080
All we need is the token that was sent to the user in the email.

8
00:00:29,190 --> 00:00:35,420
Then we agree to have a full function and the try catch first what value did that schema.

9
00:00:35,470 --> 00:00:41,070
By seeing how each email confirms came out that validates plus a request not muddy.

10
00:00:41,430 --> 00:00:50,390
And if this fails we are going to return a response that statues of faltering to the Jason and the error.

11
00:00:50,400 --> 00:00:57,720
The type is going to be the key an error that message is going to be the value next.

12
00:00:57,720 --> 00:01:02,690
Once we confirm that the token is in the request the next thing is to confirm if that token is valued.

13
00:01:02,760 --> 00:01:08,880
For that we are going to import I use our model and then we are going to try to find a user who owns

14
00:01:08,880 --> 00:01:09,530
that took.

15
00:01:09,840 --> 00:01:15,130
We used to find one method and we'll try and use software to IMO confirm.

16
00:01:15,480 --> 00:01:20,550
Code is this token if that Utzon was not found.

17
00:01:20,560 --> 00:01:22,440
We thought a new validation error.

18
00:01:22,850 --> 00:01:25,470
And first we have to pass the message.

19
00:01:25,470 --> 00:01:33,420
Then the data that was value data and finally the key which is going to be taken.

20
00:01:33,750 --> 00:01:41,550
But if the user was found which sets request the user to be equal to the user we found kind of authenticating

21
00:01:41,970 --> 00:01:45,360
the user and then would return next.

22
00:01:45,360 --> 00:01:46,760
So that's very detail.

23
00:01:46,800 --> 00:01:51,490
First we finally did that the token was valid or provided in the body.

24
00:01:51,600 --> 00:01:55,190
Then we find a user with dots who can leave the user was not found.

25
00:01:55,190 --> 00:01:58,690
We thought a validation exception if the user was following.

26
00:01:58,740 --> 00:02:04,660
Then we set the user to request a user and we call next.

27
00:02:04,660 --> 00:02:07,390
Now we need to set up the rules for these endpoints.

28
00:02:07,540 --> 00:02:18,380
So we are going to create a new out of Walter that post and this is going to be slash emails slash confirm

29
00:02:18,880 --> 00:02:21,730
and we are going to use the off controller.

30
00:02:21,740 --> 00:02:24,650
Don't confront evil method.

31
00:02:24,650 --> 00:02:27,320
We also need to import the newly created value detail.

32
00:02:27,650 --> 00:02:31,730
Then we'll positively detail as a meta way in off controller.

33
00:02:31,730 --> 00:02:37,610
We have to define this method request and response and we are going to make sure that we exploit this

34
00:02:37,610 --> 00:02:38,890
method.

35
00:02:38,890 --> 00:02:41,380
Now how do we control a user's email.

36
00:02:41,390 --> 00:02:44,120
We are going to find that user and updates.

37
00:02:44,540 --> 00:02:46,140
So we use for that.

38
00:02:46,180 --> 00:02:49,150
Find one and of deeds.

39
00:02:49,280 --> 00:02:51,800
And then when you find a user using get email.

40
00:02:51,810 --> 00:02:56,400
So remember we have to authenticate that user on the request object.

41
00:02:56,480 --> 00:02:57,290
So we are going to see.

42
00:02:57,290 --> 00:03:06,130
E-mail is request the user that email and we are going to be updating the email confirmed code we'll

43
00:03:06,140 --> 00:03:13,970
set it to law and we'll also update email confirmed at and we'll set each a new date which is today's

44
00:03:13,970 --> 00:03:20,870
date and we are also going to pass a third argument which is an option called new true so that once

45
00:03:20,870 --> 00:03:28,370
this is done it's going to return to the updated version of the user then we are going to generate a

46
00:03:28,370 --> 00:03:33,090
token for that user because the users data or profile has no data.

47
00:03:33,140 --> 00:03:38,680
We need to update the clan site so that it cannot did the cached version of the user's data.

48
00:03:38,720 --> 00:03:49,360
So this is going to be used for the Generate token and we are going to return response but Jason with

49
00:03:49,370 --> 00:03:57,780
user and token and that's our confirm email functionality to be able to test this.

50
00:03:57,790 --> 00:04:04,150
We need two sets of the client side votes on page to handle the incoming requests from wherever the

51
00:04:04,150 --> 00:04:07,740
user clicks on the link and then make the post request we do this.

52
00:04:07,780 --> 00:04:08,830
The next lesson.
