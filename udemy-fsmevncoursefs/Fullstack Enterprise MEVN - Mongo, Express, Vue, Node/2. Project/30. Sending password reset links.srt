1
00:00:00,360 --> 00:00:04,430
Let's handle the forgot password functionality on the server.

2
00:00:04,470 --> 00:00:07,560
The first thing I'm going to create a new model.

3
00:00:07,560 --> 00:00:11,040
This is going to be called password reset.

4
00:00:11,040 --> 00:00:15,520
This model is going to contain the future we need for resetting the user's password.

5
00:00:15,660 --> 00:00:25,010
First I'll import Mongoose next I'll create a password resets Kimo and this is going to be new Mongoose

6
00:00:25,010 --> 00:00:33,190
starts chemo first would have an email field which is the e-mail of the user requesting a password reset

7
00:00:33,470 --> 00:00:39,280
will have a token which is a rundown each regenerates a token that we would send into use us email to

8
00:00:39,280 --> 00:00:44,410
verify that they are actually the ones trying to reset their passwords and we'd have a created ad to

9
00:00:44,410 --> 00:00:50,440
know when this password we said was generated and so also make sure that it has a maximum expiry of

10
00:00:50,440 --> 00:00:52,330
30 days for example.

11
00:00:52,330 --> 00:00:59,770
Now I'm going to export default a new model which is called password reset and the schema is going to

12
00:00:59,770 --> 00:01:02,980
be password reset schema.

13
00:01:02,980 --> 00:01:09,110
Next would go through our wallets and our register a new vault.

14
00:01:09,460 --> 00:01:17,880
It's a post and it's going to be passwords slash email and he's going to be from the off controller

15
00:01:17,930 --> 00:01:20,790
dot forgot password method.

16
00:01:21,460 --> 00:01:24,370
Let's go to our off controller and define this method.

17
00:01:24,910 --> 00:01:34,360
So we'll define constants forgot password as a function receives requests on response.

18
00:01:34,360 --> 00:01:36,670
I would also export this function.

19
00:01:36,700 --> 00:01:39,010
Now how do we want this to work.

20
00:01:39,010 --> 00:01:46,690
What happens is we will create a password reset documents into the database with this users email and

21
00:01:46,690 --> 00:01:54,670
this use US secret token and then we agreed to send an email to this user continued that secret token

22
00:01:54,910 --> 00:02:02,440
and when they click on the link they are taken to application and they will see the reset password form.

23
00:02:02,650 --> 00:02:08,850
For that we agreed to go to the user wanted to find some new methods on the schema.

24
00:02:09,550 --> 00:02:19,420
The first method is going to be forgot password and this is going to be an sync function.

25
00:02:19,540 --> 00:02:22,630
The first thing this is going to do is generate a token

26
00:02:27,610 --> 00:02:30,550
and we'll make this seventy two characters.

27
00:02:30,670 --> 00:02:35,100
Next it's going to create a new password reset document.

28
00:02:35,140 --> 00:02:37,770
So we need to import the password reset model

29
00:02:40,910 --> 00:02:48,630
and to create a new one we're going to see how each password reset that creates the token is going to

30
00:02:48,630 --> 00:02:50,170
be this token.

31
00:02:50,340 --> 00:02:58,710
And the e-mail is going to be this that e-mail referring to the user's email and the creator that is

32
00:02:58,710 --> 00:03:02,940
going to be new dates which is the data at this moment.

33
00:03:02,940 --> 00:03:05,610
Finally we have to send an e-mail.

34
00:03:05,640 --> 00:03:16,080
So I'm going to see a week's new mail and this is going to be called forgot password mail that to this

35
00:03:16,260 --> 00:03:21,440
that e-mail and this name is the name of the recipient.

36
00:03:21,630 --> 00:03:28,800
That subject and the subject is going to be password resets the data because we are going to be sending

37
00:03:28,800 --> 00:03:30,310
data to the templates.

38
00:03:30,430 --> 00:03:36,480
They're going to be sending a You are all to the template and we are also going to be sending a name.

39
00:03:36,480 --> 00:03:45,570
So the name is going to be does not name under you are all is going to be config that you are slash

40
00:03:45,720 --> 00:03:55,330
off passwords reset slash then the token which is what we use to create the password reset tool.

41
00:03:55,830 --> 00:03:58,700
And finally we just need to call a descent method.

42
00:03:59,160 --> 00:04:03,430
But don't forget we haven't generated the forgot password e-mail yet.

43
00:04:03,540 --> 00:04:05,890
So let's create this.

44
00:04:06,120 --> 00:04:10,860
We going to say MP X friendly mail generates.

45
00:04:11,180 --> 00:04:13,020
And the name is going to be forgot password.

46
00:04:13,740 --> 00:04:15,320
So each generates at the meal.

47
00:04:15,330 --> 00:04:18,880
So if we check our mails for that we have forgot password.

48
00:04:18,990 --> 00:04:20,830
Now let's fill the details.

49
00:04:20,910 --> 00:04:23,080
We're going to have for ask Jamal.

50
00:04:23,190 --> 00:04:31,590
Hello would have a strong that is please they use us name and remember the piece of data is user name

51
00:04:31,670 --> 00:04:40,230
by the same name and then would break and then we're seeing click this link to reset your password and

52
00:04:40,230 --> 00:04:47,480
then we'd have an etch ref that displays that you are older we passed into these templates and he would

53
00:04:47,580 --> 00:04:57,570
sending here for the text we are not going to use any strongbox and we are not going to have an etiquette

54
00:04:57,800 --> 00:05:00,250
we're just going to have the link.

55
00:05:00,380 --> 00:05:08,350
OK so that said all we need to do is now call this method in our Controller.

56
00:05:08,750 --> 00:05:20,570
So our off controller we are going to see constant e-mail is equal to request and body constant user

57
00:05:21,030 --> 00:05:30,560
is equal to our each user not find one email and we're going to see how each user dot forgot password

58
00:05:31,510 --> 00:05:42,590
and you're going to see a return response to Jason with a message that says password resets link sent.

59
00:05:42,620 --> 00:05:43,290
OK.

60
00:05:43,310 --> 00:05:46,430
So let's see this in action.

61
00:05:46,460 --> 00:05:53,240
It looks like our server is question on I think let's check the error a syntax error because we are

62
00:05:53,240 --> 00:05:56,050
using tweets in a loan a awaits function.

63
00:05:56,090 --> 00:06:01,600
So make sure we make that a sync and our server is good to go refresh.

64
00:06:01,610 --> 00:06:02,250
Great.

65
00:06:02,270 --> 00:06:06,630
So now when you send a push request it spend in

66
00:06:09,490 --> 00:06:13,420
great we have a successful redirect.

67
00:06:13,420 --> 00:06:20,970
Let's check mail drop and check our inbox you can see password resets you can see dos on my details.

68
00:06:21,030 --> 00:06:21,600
Can we have here.

69
00:06:21,610 --> 00:06:24,160
But could I click this link to reset your password.

70
00:06:24,460 --> 00:06:30,910
And if we copy the link to check it out you can see off passwords resets and we have a token right there

71
00:06:30,900 --> 00:06:36,610
for password reset and if you check the text you can see that sex is just as we define it.

72
00:06:36,640 --> 00:06:37,200
All right.

73
00:06:37,270 --> 00:06:43,840
So we are successfully sending a password reset link to the user but there's a couple of validations

74
00:06:43,840 --> 00:06:47,800
we have to take care of before actually sending any link to a user.

75
00:06:47,860 --> 00:06:49,420
We'll do that in the next lesson.
