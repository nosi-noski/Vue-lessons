1
00:00:00,420 --> 00:00:05,670
Registering a user takes about three to four seconds because we are trying to send an e-mail for confirming

2
00:00:05,670 --> 00:00:06,570
the account.

3
00:00:06,570 --> 00:00:11,430
We are going to add a loading State of the button so that why the user waits for the email to be sent

4
00:00:12,240 --> 00:00:16,190
they can see a loading button to do this.

5
00:00:16,220 --> 00:00:22,670
I've included unloading the PNC file into our public folder and you can have access to this.

6
00:00:22,920 --> 00:00:25,180
When I overload the code to get.

7
00:00:25,710 --> 00:00:32,880
We have to configure our server to be able to serve this static file so in the index suggests right

8
00:00:32,910 --> 00:00:38,520
before we configure our gets wired card we are going to use the Express static middleware

9
00:00:41,540 --> 00:00:48,620
and this is going to resolve the path for the current directory name and he's going to serve from the

10
00:00:48,620 --> 00:00:56,240
public folder and make sure this Middleware is defined after the Web def middleware so often defining

11
00:00:56,240 --> 00:00:59,480
this when the client side requires the loading the PMG.

12
00:00:59,510 --> 00:01:05,990
It's going to be solved from this public folder so sets up our loader we are going to have a Luda component

13
00:01:08,980 --> 00:01:14,660
and this is simply going to be an image with source loading the PSG.

14
00:01:14,770 --> 00:01:22,670
Next we're going to have a button component and this is going to be of the same template as the button

15
00:01:22,700 --> 00:01:23,950
we have in our register.

16
00:01:23,960 --> 00:01:30,200
So I'll cut this out and paste it in the button component to use these globally.

17
00:01:30,200 --> 00:01:39,420
We are going to come to our index the for our clients and import these two components.

18
00:01:41,420 --> 00:01:45,870
Then we'll register them with view that component

19
00:01:49,910 --> 00:01:54,170
the name of the loader is loader and of the button Beattie B10.

20
00:01:54,650 --> 00:02:00,070
So in our register we can mount the component using BGF.

21
00:02:00,290 --> 00:02:03,890
We need to define a couple of props that is Watson is going to receive.

22
00:02:03,890 --> 00:02:10,820
First it's going to receive a disabled prop and this is going to be disabled.

23
00:02:10,820 --> 00:02:15,710
It's also going to emit the Click event when clicked.

24
00:02:17,900 --> 00:02:22,830
Let's define the props.

25
00:02:24,320 --> 00:02:30,640
The first is going to be just a mode of type boolean.

26
00:02:32,400 --> 00:02:39,240
It's not required and the default is false.

27
00:02:39,240 --> 00:02:45,840
Next we'll have a label prop of type String and it's required

28
00:02:48,630 --> 00:02:50,260
next we'll have a loading prop

29
00:02:53,440 --> 00:02:56,150
of type boolean.

30
00:02:56,940 --> 00:03:02,850
It's not required and the default is false.

31
00:03:02,940 --> 00:03:09,600
How do we use the looting prop we are going to display a loader if this button is loading.

32
00:03:09,720 --> 00:03:19,950
So V if loading will display a load up and would simply have a spine displaying the label if the button

33
00:03:20,010 --> 00:03:22,050
is not loading.

34
00:03:22,440 --> 00:03:26,160
We are also going to change the classes when the button is loading.

35
00:03:26,340 --> 00:03:33,180
So instead of giving this a background of Emerald we are going to have a dynamic class who pass an object

36
00:03:33,930 --> 00:03:42,890
and background of M0 out is going to be used when the component is not looting and background of Emerald.

37
00:03:43,020 --> 00:03:47,020
Light is going to be used when the component is loading.

38
00:03:47,280 --> 00:03:53,100
So we also want to give this a class of cars not allowed so that the castle is disabled on this button

39
00:03:53,100 --> 00:03:55,100
when looting.

40
00:03:55,620 --> 00:04:01,000
Now in our distorted view let's fast approach required will pass in a label.

41
00:04:01,050 --> 00:04:08,170
This is going to be sign up will pass in disabled and we don't yet have this configured.

42
00:04:08,340 --> 00:04:12,360
We need to be able to control when the component is looting and when it's not.

43
00:04:12,360 --> 00:04:18,250
So in our data would have a looting this would default to.

44
00:04:18,540 --> 00:04:22,770
We are going to have a method called toggle loading

45
00:04:26,390 --> 00:04:29,340
and you squint you said this that loading to be a coach.

46
00:04:29,330 --> 00:04:37,130
Not this not loading and disabled is going to be bound to loading.

47
00:04:37,260 --> 00:04:46,200
So when the video starts loading the button disabled Pop is going to be true then would also bind loading

48
00:04:46,380 --> 00:04:53,400
to be equality loading and I think that's all the props we need for the button now.

49
00:04:53,460 --> 00:05:00,130
Finally when the user clicks on the button it should still call the register method.

50
00:05:00,390 --> 00:05:08,670
So I click as you call to register and also when the register method is called We want to make sure

51
00:05:08,670 --> 00:05:20,710
we toggle loading and when the richest start is done we want to also make sure we toggle loading and

52
00:05:20,720 --> 00:05:22,130
we can also redirect the user.

53
00:05:22,130 --> 00:05:29,400
At this point if we want my seeing this Walter the push and we can redirect the user to the homepage.

54
00:05:29,450 --> 00:05:35,210
The reason why we can use that then is because our action returns a promise because launches that we

55
00:05:35,210 --> 00:05:38,780
simply return play on the post which returns a promise.

56
00:05:38,780 --> 00:05:41,030
So now I saw where it started.

57
00:05:41,030 --> 00:05:42,590
Let's check this out in the browser

58
00:05:45,640 --> 00:05:46,920
if we watch our network

59
00:05:50,060 --> 00:05:55,000
pass in a name email and password.

60
00:05:55,340 --> 00:05:57,290
Click on sign up.

61
00:05:57,290 --> 00:06:05,600
Notice that the loader is displayed and once the API request is done it redirects the use of back to

62
00:06:05,780 --> 00:06:07,170
the homepage.

63
00:06:07,190 --> 00:06:13,160
What an improvement we need to make to our leader is the fact that the image does not speak so we are

64
00:06:13,160 --> 00:06:15,050
going to go to our leader component.

65
00:06:15,080 --> 00:06:24,200
Give this a class of Luda and in our main dot CSX we can define this class

66
00:06:29,150 --> 00:06:36,200
so this class has an animation duration of two thousand milliseconds an animation name of spin and all

67
00:06:36,200 --> 00:06:41,820
these dots is transforms it from zero to 20 and 60 degrees indefinitely.

68
00:06:41,840 --> 00:06:43,330
So let's try this out.

69
00:06:44,700 --> 00:06:52,910
We'll type in a fake name email and password and you can see that I love the spins.

70
00:06:55,380 --> 00:06:59,520
And when the registration is successful the user is redirected back to the homepage.
