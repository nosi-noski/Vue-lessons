1
00:00:00,770 --> 00:00:05,770
Let's quit a valid detail for a forgot password request.

2
00:00:05,780 --> 00:00:13,150
So in a validates us we going to have one card forgot password and this is really important first.

3
00:00:13,160 --> 00:00:18,310
Just so I don't type out much code I'm going to duplicate what we have for the logging.

4
00:00:18,550 --> 00:00:24,840
I'm going to call this forgot password schema and we don't need to really did the password.

5
00:00:24,880 --> 00:00:31,720
We just need to email then we are going to have a function body for this one and we are actually going

6
00:00:31,720 --> 00:00:43,310
to use a sink a which because we have a lot of checks to do so make this a sink function fast.

7
00:00:43,400 --> 00:00:44,980
We want to have our tri catch.

8
00:00:47,630 --> 00:00:49,250
And here we are going to wait.

9
00:00:49,490 --> 00:00:52,380
Forgot password not validated.

10
00:00:52,580 --> 00:01:02,330
I will pass in request the buddy and if there are any errors we are going to respond with a 42.

11
00:01:02,380 --> 00:01:07,540
So here we've validated that the data is correct.

12
00:01:07,540 --> 00:01:11,410
Next thing is we have to make sure that a user exists with this email.

13
00:01:11,410 --> 00:01:13,440
So which input they use our model

14
00:01:16,760 --> 00:01:22,220
then I'm gonna say constants user is how we each user that find one

15
00:01:27,100 --> 00:01:40,990
with email us requests that muddy that email and we're going to say if not user then throw a new Yelp

16
00:01:41,080 --> 00:01:42,690
dud validation error.

17
00:01:43,420 --> 00:01:50,200
And here first real positive message being this user does not exist.

18
00:01:52,360 --> 00:01:56,540
Secondly the data will be validated which is requested buddy.

19
00:01:56,590 --> 00:02:00,670
And finally the name of the feud which is email.

20
00:02:00,830 --> 00:02:09,130
And next we are going to make sure we call next and what we can do is we can see request the user is

21
00:02:09,130 --> 00:02:14,230
equal to the found user so that we don't have to find this user again in our Controller.

22
00:02:14,950 --> 00:02:20,380
And we are going to go to our worlds file and we are going to import this value detail

23
00:02:25,120 --> 00:02:27,330
and would use it on this world.

24
00:02:28,920 --> 00:02:35,370
Which means after these validating ones if it ever gets to the controller we are already going to have

25
00:02:35,370 --> 00:02:36,750
the author user.

26
00:02:36,750 --> 00:02:45,700
So we just need to request that user or we can even get rid of this line on this one and do our wage

27
00:02:45,850 --> 00:02:46,490
request.

28
00:02:46,490 --> 00:02:54,190
The user forgot password as easy as that and it's going to send a password we said linked to off useful.

29
00:02:54,190 --> 00:02:55,290
Now let's try this out.

30
00:02:55,300 --> 00:02:57,670
Make sure it actually works.

31
00:02:57,670 --> 00:03:03,830
So we'll try to sign in but we forgot our password so we'll pass in our email.

32
00:03:03,880 --> 00:03:08,190
Click on send password reset link and great.

33
00:03:08,280 --> 00:03:11,110
It works if we check out mail drop.

34
00:03:11,160 --> 00:03:12,600
We have a link right there.

35
00:03:13,720 --> 00:03:14,740
One final check.

36
00:03:14,740 --> 00:03:21,280
We have to do is to make sure that this user has not already received a password reset link because

37
00:03:21,280 --> 00:03:23,470
we can send many links to the user.

38
00:03:23,470 --> 00:03:28,960
It's a little insecure because those are mainly tokens that can be used to assess our system.

39
00:03:28,960 --> 00:03:40,700
So in our value detail we are also going to import the password reset model also after finding the user.

40
00:03:40,990 --> 00:03:52,570
We are also going to check constant existing resets is going to be equal to our weight password reset.

41
00:03:52,600 --> 00:04:00,510
Find one where the email is the email of the authenticated user and we probably should destruct other

42
00:04:00,530 --> 00:04:04,330
email at the top so we can use it many times.

43
00:04:04,340 --> 00:04:08,490
So email is going to be a culture request not buddy.

44
00:04:08,510 --> 00:04:18,470
So we tried to find a password reset for this user even though use exists and if existing resets which

45
00:04:18,470 --> 00:04:24,970
means there's already a password reset for this user we are going to throw a New York validation error

46
00:04:25,010 --> 00:04:27,790
but the message would be different.

47
00:04:27,860 --> 00:04:31,980
The message is going to see password resets.

48
00:04:31,980 --> 00:04:34,500
Link already sends

49
00:04:37,420 --> 00:04:41,470
then we still said they use our request and return next.

50
00:04:41,470 --> 00:04:44,550
So now I already have a password reset.

51
00:04:44,560 --> 00:04:46,300
Let's try to request another one

52
00:04:49,130 --> 00:04:51,630
I'll forget my password.

53
00:04:51,830 --> 00:04:55,670
But could a tumor that come when I click on this.

54
00:04:55,670 --> 00:05:01,010
We have password resettling already sense because I've already received a link and that's some good

55
00:05:01,010 --> 00:05:02,780
validation we have right there.

56
00:05:03,000 --> 00:05:06,980
All right so the validation for the forgot good password is complete.

57
00:05:06,980 --> 00:05:09,940
Let's move on to resetting the password in the next lesson.
