1
00:00:00,510 --> 00:00:05,470
Let's handle the logging process in this lesson first on the south side.

2
00:00:05,490 --> 00:00:11,660
We are going to create the method that handles authentication for users.

3
00:00:11,670 --> 00:00:18,070
This method is going to get the email and password for the user.

4
00:00:19,620 --> 00:00:29,100
And it's going to try to authenticate this user by festival finding the user so constant user is a waste

5
00:00:30,330 --> 00:00:34,190
user that find one by email

6
00:00:37,510 --> 00:00:45,670
and if it finds the user then it is going to compare the passwords to keep our controllers cleaner.

7
00:00:45,720 --> 00:00:49,380
We agreed to have a method in our model that helps us compare passwords.

8
00:00:49,680 --> 00:01:02,280
So we're going to see users Kumar not methods that compare passwords and it's going to be a function

9
00:01:02,650 --> 00:01:10,050
and this function is going to taking the plain password and it's simply going to return be equipped

10
00:01:11,310 --> 00:01:17,500
not confessing of the plain password with this not password.

11
00:01:17,510 --> 00:01:22,580
So it's comparing the plain password passed by the user with the user's hashed password.

12
00:01:23,060 --> 00:01:32,090
So in the controller we can check if user then if user does compare passwords

13
00:01:34,810 --> 00:01:45,780
on will pass in the plain password then we are going to return response that Jason will pass in the

14
00:01:45,780 --> 00:01:46,230
user.

15
00:01:46,650 --> 00:01:54,690
We also need a token for the user so we can create a token using the user generated token method and

16
00:01:54,690 --> 00:01:58,720
pass in the token in the response.

17
00:01:59,260 --> 00:02:05,740
Now if the user was not found or if the passwords did not match at the end of this method we are simply

18
00:02:05,740 --> 00:02:12,310
going to return a response that statue's 400.

19
00:02:12,540 --> 00:02:22,540
The Jason with e-mail that sees these credentials do not match our records.

20
00:02:24,420 --> 00:02:29,630
So first we try to find a user if we find a user.

21
00:02:29,730 --> 00:02:33,190
And if they use us passwords compare successfully.

22
00:02:33,230 --> 00:02:36,620
Now we are going to generate a token and return to that user.

23
00:02:36,870 --> 00:02:42,450
But if the users passwords feel or we don't find the user then we return of foreign threats such as

24
00:02:42,450 --> 00:02:47,960
quote with this error now that our End Point is done.

25
00:02:48,040 --> 00:02:50,040
We need to take care of the value data.

26
00:02:50,410 --> 00:03:02,930
So we are going to create a new log in the chess validator import or as you up from you up and will

27
00:03:02,930 --> 00:03:04,860
create a logging schema.

28
00:03:06,980 --> 00:03:18,520
And this is going to be up that object of a specific shape on the e-mail is going to be a string that

29
00:03:18,520 --> 00:03:23,040
is required and we can also make sure it's an email

30
00:03:26,160 --> 00:03:30,730
and the password is a stream.

31
00:03:32,600 --> 00:03:36,220
With a minimum of six characters that is required.

32
00:03:37,870 --> 00:03:45,670
Now all we need to do is exports default a function that takes in request response next.

33
00:03:45,690 --> 00:03:52,070
And in this function we can return logging schema dot validate

34
00:03:54,540 --> 00:04:00,830
dot then would return next and catch

35
00:04:05,790 --> 00:04:17,770
would return response that statues of 422 the Jason with the error on the path being the error that

36
00:04:18,100 --> 00:04:19,480
message.

37
00:04:19,520 --> 00:04:26,430
And we actually have to get the error from the catch block and this looks a little cranky.

38
00:04:26,430 --> 00:04:34,220
So let's use prettier to format this so that you can see clearly and great.

39
00:04:34,220 --> 00:04:35,850
So now let's look up what we have.

40
00:04:36,170 --> 00:04:42,250
We return logging that funny date and then if it's successful we call next.

41
00:04:42,290 --> 00:04:49,800
And then if there's an error we catch the error and then we call or return a 42 with error that path.

42
00:04:49,810 --> 00:04:51,540
An error message.

43
00:04:51,650 --> 00:05:01,540
So we have to go to our router which is our water and import this funny detail import log in volume

44
00:05:01,570 --> 00:05:01,970
Ito

45
00:05:05,590 --> 00:05:15,160
from validators slash logging and finally we are going to pass this as a middleware to the logging accounts.

46
00:05:15,670 --> 00:05:20,710
And that seat for the server side of the logging process.

47
00:05:20,710 --> 00:05:24,280
We are going to connect this to the client side logging process in the next lesson.

48
00:05:24,340 --> 00:05:26,910
And if there are any problems with our backend we are going to fix it.

49
00:05:26,920 --> 00:05:27,150
Then.
