1
00:00:00,540 --> 00:00:03,390
Let's add validation to the register form to do that.

2
00:00:03,390 --> 00:00:06,130
We are going to npm install the validate.

3
00:00:06,300 --> 00:00:11,430
And this is a package that's going to help us validate our forms really easily.

4
00:00:11,430 --> 00:00:15,300
Next we need to register this form with our view instance.

5
00:00:15,300 --> 00:00:24,600
So in the index suggests for the client would import value data from V validate and we would use this

6
00:00:24,600 --> 00:00:25,170
review.

7
00:00:26,520 --> 00:00:34,140
And now if we check out our component give this a refresh and view the register component specifically.

8
00:00:34,160 --> 00:00:41,210
You can see we have new computer properties for errors that the feuds object is empty which is supposed

9
00:00:41,210 --> 00:00:44,660
to represent all the future we have in our form.

10
00:00:44,720 --> 00:00:49,580
And the reason why it's empty is because we need to define the name for each of the future we have in

11
00:00:49,580 --> 00:00:50,340
our form.

12
00:00:50,360 --> 00:00:55,070
So we are going to pass a name pop to the input component we created.

13
00:00:56,040 --> 00:00:58,560
So the name of this is going to be name.

14
00:00:58,610 --> 00:01:03,780
The e-mail is going to be email and the password is going to be password.

15
00:01:05,460 --> 00:01:09,870
And finally we need to go to the text input and make sure we receive this pop.

16
00:01:09,930 --> 00:01:15,790
The name is going to be of type String and is required.

17
00:01:17,060 --> 00:01:22,420
And we need to bind that name today input.

18
00:01:22,470 --> 00:01:26,780
Now we need to define the validations for each of these fields.

19
00:01:26,910 --> 00:01:32,370
We are going to pass a v validate attribute and this is going to be a string containing the violation

20
00:01:32,370 --> 00:01:34,020
rules for the name.

21
00:01:34,020 --> 00:01:37,410
It's only going to be required for the e-mail.

22
00:01:37,500 --> 00:01:41,590
It's going to be required and type e-mail.

23
00:01:41,610 --> 00:01:49,450
And finally for the password it's going to be required and a minimum of six characters.

24
00:01:49,460 --> 00:01:55,250
Now if we come back to our application I give this a refresh visit the register component and check

25
00:01:55,250 --> 00:01:56,050
out the future.

26
00:01:56,060 --> 00:01:59,470
You can see we have the email name and password fields.

27
00:01:59,480 --> 00:02:07,010
And each of these has these are containing if there are changed dirty involved pending as we type in

28
00:02:07,130 --> 00:02:14,540
this input fields we can see validation rules populated in the items are we.

29
00:02:14,540 --> 00:02:18,720
So the e-mail must be a valid email.

30
00:02:18,920 --> 00:02:25,290
And as we type in the password we have the was showing up the form doesn't work properly yet because

31
00:02:25,290 --> 00:02:30,600
the events that we need to admit from the input so that we validate is going to know when to properly.

32
00:02:30,600 --> 00:02:37,380
An example of these events is the focus so that we value did not show end of input has been focused

33
00:02:37,770 --> 00:02:46,230
and we just image focus so that we knew when the form has been touched or the form input has been touched

34
00:02:46,530 --> 00:02:52,720
would also emit blur to know when the user has blurred out of this input.

35
00:02:53,420 --> 00:03:04,460
And this is going to be blurred we also meet change and this is going to happen when they use user changes

36
00:03:04,520 --> 00:03:11,270
the value of this input and it's going to emit the same value as the input.

37
00:03:11,270 --> 00:03:14,360
Now if we visit our form and give this a good refresh

38
00:03:17,540 --> 00:03:18,740
as we type our name.

39
00:03:19,070 --> 00:03:20,360
If I delete the value

40
00:03:23,550 --> 00:03:28,010
we have the name how US populate it when this form is submitted.

41
00:03:28,080 --> 00:03:33,690
What we want to do is make sure the data in the form is validated before actually making an API request

42
00:03:33,690 --> 00:03:41,670
to register the user to do that in the register that view when this button is clicked we'll call or

43
00:03:41,670 --> 00:03:42,840
register method

44
00:03:45,710 --> 00:03:49,880
and will define our methods.

45
00:03:49,880 --> 00:03:58,490
And here we can call this that validate or validate to validate all of the data.

46
00:03:59,180 --> 00:04:07,460
And this returns a promise with are is valid value and this value tells us if the form is valid.

47
00:04:07,460 --> 00:04:09,540
So if it's valid then we are going to proceed.

48
00:04:09,560 --> 00:04:11,000
But if it's not valid.

49
00:04:11,140 --> 00:04:18,160
Now we are going to return early so that the user does not get to submit the form.

50
00:04:18,160 --> 00:04:26,030
So now if we check out our form visit the register component you can see the items are easier when I

51
00:04:26,030 --> 00:04:26,750
click on that.

52
00:04:29,160 --> 00:04:36,450
The items are is three because I try to submit the form and the value data or how to validate the data

53
00:04:37,380 --> 00:04:37,780
now.

54
00:04:37,870 --> 00:04:44,410
We need to display the arrows for these input fields so we are going to be passing an error prop to

55
00:04:44,410 --> 00:04:45,200
each of them.

56
00:04:46,100 --> 00:04:48,560
So this is going to be errors that first

57
00:04:51,240 --> 00:05:02,610
password will do the same for email and the same for name in the text impute we have when you receive

58
00:05:02,610 --> 00:05:04,050
the error probe as a string

59
00:05:10,730 --> 00:05:12,700
and required is false.

60
00:05:15,370 --> 00:05:19,090
Then we can display the error in this component.

61
00:05:19,090 --> 00:05:20,900
What we are going to do is create a D

62
00:05:24,190 --> 00:05:34,470
and put the input in it and I'm going to move the magic bottom to this diff and remove it from the input

63
00:05:34,770 --> 00:05:42,810
so that it doesn't push the hour down and I'm going to have a span of text read for the error.

64
00:05:43,210 --> 00:05:47,050
So here I'll just play the error and not only make sure this is displayed.

65
00:05:47,050 --> 00:05:50,110
If there is an error.

66
00:05:50,110 --> 00:05:54,890
Now if I visit the form you can sign up you can see the errors.

67
00:05:54,920 --> 00:05:55,500
Sure.

68
00:05:55,960 --> 00:06:00,970
But if I want these hours to be smaller I can give these a text of extra small

69
00:06:03,790 --> 00:06:05,950
and now I think of the perfect size.

70
00:06:06,340 --> 00:06:10,780
So as we type we can see the validation rules show up perfectly.

71
00:06:11,500 --> 00:06:16,030
And once the violation rules are cleared we have the data correctly formatted.

72
00:06:16,170 --> 00:06:19,260
And now if we submit a form everything should go well.

73
00:06:19,360 --> 00:06:23,800
So that's how we can include validation really easy with the validated package.
