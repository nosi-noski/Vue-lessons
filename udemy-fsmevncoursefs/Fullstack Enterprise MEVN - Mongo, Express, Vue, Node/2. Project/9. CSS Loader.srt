1
00:00:00,630 --> 00:00:10,500
Let's go CSX load us so that we can load CSX in our templates npm install CSX loader.

2
00:00:10,560 --> 00:00:18,180
We're also going to be installing mini CSX extracts blogging which is going to help us separate CSX

3
00:00:18,180 --> 00:00:22,310
from javascript Bondo using web Park.

4
00:00:22,320 --> 00:00:25,450
Now I need you to know exactly why we are installing these plugins.

5
00:00:25,470 --> 00:00:30,750
So what I'm going to do is I'm going to try to use CSX without registering these plugins and went back

6
00:00:30,990 --> 00:00:32,220
to see the results.

7
00:00:32,220 --> 00:00:40,050
So here I am a star supporter and here I'm gonna have a mean that see assess now how art or style for

8
00:00:40,050 --> 00:00:43,830
each one color is going to be red.

9
00:00:44,030 --> 00:00:46,890
And in my index suggests I'm going to import

10
00:00:49,930 --> 00:00:56,590
stars mean that CSX now would run our project and piano on Def

11
00:01:00,110 --> 00:01:05,970
and we have an arrow and shows as we may need an appropriate low that's handled this file type and that's

12
00:01:05,970 --> 00:01:12,600
exactly why we need a CSX loader so in each comes our way configuration and add a new load up to our

13
00:01:12,600 --> 00:01:13,900
roofs.

14
00:01:13,980 --> 00:01:20,850
Copy this one and here we're going to find all files that end with CSX and for those fires we would

15
00:01:20,850 --> 00:01:29,090
use the CSX loader and after that you can see where compare successfully and if you sit up well so everything

16
00:01:29,090 --> 00:01:31,710
works perfectly Max.

17
00:01:31,730 --> 00:01:38,090
We need to be able to extract this CSX out of our javascript scripts and have it separately in a success

18
00:01:38,090 --> 00:01:38,910
file.

19
00:01:38,960 --> 00:01:47,030
So to do this we are going to use the many extra accesses blogging so constant many extra accesses blogging

20
00:01:49,480 --> 00:01:50,590
sequels mini extracts.

21
00:01:50,600 --> 00:01:55,020
Yes this book is now to use this blogging.

22
00:01:55,020 --> 00:01:58,140
We are going to have multiple load us for CSX.

23
00:01:58,170 --> 00:02:01,400
So instead of putting an object we're going to pass on our way.

24
00:02:02,070 --> 00:02:09,660
And we agreed to pass in many extra blogging but loader as the first one and CSX loader as a second

25
00:02:09,660 --> 00:02:10,090
one.

26
00:02:10,290 --> 00:02:16,680
And the order is very important because whip out process a CSX loader before actually processing the

27
00:02:16,680 --> 00:02:23,040
minute extra accesses blogging load up so that I can compress assets and then loaded with the extra

28
00:02:23,050 --> 00:02:24,600
accesses blogging.

29
00:02:24,600 --> 00:02:28,000
So now we also need to register this blogging.

30
00:02:28,200 --> 00:02:36,600
So in our blogging section we'll have new media extracts RSS blogging and now we have we're part successfully

31
00:02:36,600 --> 00:02:43,830
compiling the mini extracts RSS blogging we need to pass a contribution which is the finding that we

32
00:02:43,830 --> 00:02:46,500
want to see ISIS in the project extract that too.

33
00:02:46,530 --> 00:03:00,640
In this case Abdel see ISIS so if we want NPM long build client we can see the updates RSS file and

34
00:03:00,640 --> 00:03:07,210
this contains the CSX form our project we want to also make sure that this ISIS fighter is linked in

35
00:03:07,210 --> 00:03:18,340
our index stood Joan of Arc so we'd have a link and this is going to be the CSX and when we are in development

36
00:03:18,340 --> 00:03:27,760
mode which is NPM on Def if we refresh our browser you can see that the CSX is not applied since we

37
00:03:27,760 --> 00:03:35,920
are linking the update CSX is not indexed extra file now any for the changes that we make in the CSX

38
00:03:38,440 --> 00:03:40,230
automatically reflect it.

39
00:03:40,300 --> 00:03:48,240
So you can see weapon automatically compilers and then puts the content in the update SPSS so you can

40
00:03:48,240 --> 00:03:53,730
see weapon automatically compilers and when we refresh our browser these changes are reflected.
