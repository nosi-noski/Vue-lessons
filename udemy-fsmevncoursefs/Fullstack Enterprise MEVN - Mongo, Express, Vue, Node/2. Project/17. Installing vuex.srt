1
00:00:00,800 --> 00:00:03,950
We are going to install view X in application in this lesson.

2
00:00:04,110 --> 00:00:15,710
Npm install safe view x next will create a store folder in our clients and this is going to have an

3
00:00:15,710 --> 00:00:17,780
index to yes in this file.

4
00:00:17,840 --> 00:00:20,210
We'll create a new view X instance.

5
00:00:20,210 --> 00:00:27,420
First would import view X and we'd also import view so we can register each view.

6
00:00:27,740 --> 00:00:32,730
Then we would use view X with view.

7
00:00:32,750 --> 00:00:42,150
Then we can export default New View X that store and for our store we are going to be having different

8
00:00:42,210 --> 00:00:45,780
modules so that we can easily structure our data.

9
00:00:45,840 --> 00:00:51,080
The first module we are going to be having is the off module for everything that has to do with authentication.

10
00:00:51,150 --> 00:00:59,610
This module is going to have an index suggests for the state mutations that just for mutations actions

11
00:00:59,760 --> 00:01:08,630
digest for actions and gets us but Jess forgets us in the index largesse would import each of these

12
00:01:09,940 --> 00:01:16,190
flowers so import mutations for mutations gets us

13
00:01:19,890 --> 00:01:27,750
actions and we are going to export the default and objects.

14
00:01:27,760 --> 00:01:36,730
This object is going to have a state for an empty object at the moment he's going to have actions gets

15
00:01:36,730 --> 00:01:44,400
us and mutations in each of these files we are going to export an object by default

16
00:01:48,910 --> 00:01:59,070
and now in our main index digests we can import this module import off from off and use them in our

17
00:01:59,070 --> 00:02:04,520
application so we'll define a modules object and add of in it.

18
00:02:05,100 --> 00:02:07,890
So now we have our module.

19
00:02:08,580 --> 00:02:19,300
If we visit application we open our def 2s this exude def Touche we still have no view extort detected.

20
00:02:19,430 --> 00:02:25,600
The final step of the installation process is to use the store with our view X instance.

21
00:02:25,610 --> 00:02:38,260
So here we're going to import store from store and past the store to our new instance and if we visit

22
00:02:38,290 --> 00:02:43,140
obligation on refresh we can see that we have a reduced store.

23
00:02:43,150 --> 00:02:47,680
If we load the state all we have is an off empty object.

24
00:02:47,680 --> 00:02:52,130
The first action we are going to be having is to register a user.

25
00:02:52,360 --> 00:03:00,880
So we are going to export a constant export constant Post Register and this is going to be a call to

26
00:03:01,090 --> 00:03:02,440
post register.

27
00:03:02,440 --> 00:03:07,540
This constant is going to make sure we don't have typos when we reuse this string.

28
00:03:07,570 --> 00:03:13,720
We are going to have an action for Post Register and this is going to make an asynchronous call to the

29
00:03:13,720 --> 00:03:16,360
server to register a user.

30
00:03:16,360 --> 00:03:20,420
Now for us to make asynchronous calls we are going to be requiring exists.

31
00:03:20,470 --> 00:03:22,570
So I mean store eggs year

32
00:03:26,200 --> 00:03:33,120
and now that we have existing stores I'm going to create a new folder called details and in here I'll

33
00:03:33,120 --> 00:03:34,300
have an excuse.

34
00:03:34,340 --> 00:03:38,430
Jess so that we can create a reusable excuse instance.

35
00:03:38,640 --> 00:03:49,530
And here I'll import X years from X years and I'm going to export default x years that creates and for

36
00:03:49,530 --> 00:03:52,340
the only configuration we need based you are.

37
00:03:52,890 --> 00:03:59,640
So that here we can see the you are only slash API slash version 1 and we can add a slash at the end.

38
00:03:59,910 --> 00:04:05,160
So this is very important so that when your client side begins to use version 2 of your API you just

39
00:04:05,160 --> 00:04:10,410
need to bump this up to version 2 and in the whole project we don't need to rewrite this path because

40
00:04:10,410 --> 00:04:18,770
it's already defined in our existing instance now in our actions we can import the existing instance

41
00:04:18,770 --> 00:04:19,480
we created.

42
00:04:19,790 --> 00:04:28,420
So import clients we can call it clients from our clients slash each those slash exerts.

43
00:04:28,440 --> 00:04:39,860
And here we can have an our function that returns clients that post to the auth slash register end point

44
00:04:40,380 --> 00:04:42,150
and it's going to pass data.

45
00:04:42,300 --> 00:04:48,780
The first argument into any action is the context and the second argument is data that we can pass from

46
00:04:48,870 --> 00:04:50,100
where this action is called.

47
00:04:50,400 --> 00:04:54,160
So the second argument to our client that boost is going to be data.

48
00:04:54,240 --> 00:04:57,730
We've defined an action called Post Register.

49
00:04:57,780 --> 00:05:05,100
We can actually trigger this action in the register component or the register speech when the user clicks

50
00:05:05,130 --> 00:05:05,870
on the register.

51
00:05:06,480 --> 00:05:08,730
So let's import that action here.

52
00:05:08,850 --> 00:05:20,780
Import boost register from store slash off slash actions because that's where it was exported from.

53
00:05:20,820 --> 00:05:29,490
And when the user successfully passes validation we can call this dot store the dispatch that action

54
00:05:29,680 --> 00:05:34,950
and we'll pass in this dot model as the detail we want to send to that action.

55
00:05:34,950 --> 00:05:43,020
Then the action receives the data here and calls client dot post which is making a post request to our

56
00:05:43,020 --> 00:05:46,950
server to these specific endpoints with the data that was passed.

57
00:05:47,610 --> 00:05:52,780
So now let's try this out to see if it works or we haven't ever that same kind of resolve.

58
00:05:52,780 --> 00:06:01,820
Clients each use excuse let's make sure the directory folder is correct and let's see Babu aliases.

59
00:06:01,900 --> 00:06:04,660
We don't have an alias for clients so let's create that.

60
00:06:04,990 --> 00:06:07,500
So we'll have our clients.

61
00:06:08,200 --> 00:06:12,460
And this is going to be slash clients and why we're here.

62
00:06:12,460 --> 00:06:15,080
Let's add an alias for the store.

63
00:06:15,100 --> 00:06:17,120
So we'd have store.

64
00:06:18,310 --> 00:06:27,110
And this will point to client slash store and and we have an error about a syntax.

65
00:06:27,130 --> 00:06:29,370
I think for this we need to restart our server.

66
00:06:30,010 --> 00:06:32,020
So just restart my server

67
00:06:35,210 --> 00:06:39,110
and everything was fine refreshing and ready to go.

68
00:06:39,420 --> 00:06:46,130
Now if I click on sign up failed validation rules that if I provide my details

69
00:06:48,810 --> 00:06:54,710
and click on sign up we can see it makes an API request our server gives us 0 4 0 4 which is a good

70
00:06:54,710 --> 00:06:55,250
thing.

71
00:06:55,280 --> 00:07:00,890
It means that our action is successfully dispatched it successfully makes the API request to express

72
00:07:01,100 --> 00:07:06,200
server in the next lesson we are going to begin handling this server side of things.
