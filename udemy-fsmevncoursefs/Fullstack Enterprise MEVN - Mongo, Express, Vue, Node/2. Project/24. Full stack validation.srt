1
00:00:00,450 --> 00:00:02,460
Before saving the that's our deeds of each.

2
00:00:02,460 --> 00:00:05,180
We have to make sure the data is in the right four months.

3
00:00:05,190 --> 00:00:10,980
That's what we are going to be doing in this lesson in so off we are going to create a value database

4
00:00:11,550 --> 00:00:12,760
for the inhere.

5
00:00:12,780 --> 00:00:15,170
I'll have a register of Jess.

6
00:00:15,180 --> 00:00:21,420
This is going to be a validation middleware that once before actually registering to the user for validation.

7
00:00:21,420 --> 00:00:28,930
We are going to install a package called Yelp and you can use any validation package you like.

8
00:00:28,930 --> 00:00:34,050
This just seems very easy to use for me for this.

9
00:00:34,100 --> 00:00:44,300
We are going to import or as Yelp from Yelp then we are going to define a validation schema here.

10
00:00:44,570 --> 00:00:54,140
So Constance registers schema is going to be equal to yup I'm expecting an object with a specific shape.

11
00:00:55,470 --> 00:01:03,230
And in here we won the name to be your upstream and this string is required.

12
00:01:03,970 --> 00:01:16,700
We once that email to be a string and these strings should be an email on the string should be required.

13
00:01:17,290 --> 00:01:26,970
Finally we won the password to be a Yelp string with a minimum of six characters and should be required.

14
00:01:27,140 --> 00:01:32,530
Now we need to export defaults on Express middleware

15
00:01:38,480 --> 00:01:43,450
and this middle way is going to call the register scheme of validation to validate the data.

16
00:01:43,490 --> 00:01:50,790
First we need to get the data so we'll get name email and password

17
00:01:55,130 --> 00:02:04,880
some requests that buddy next will call the registrar schema value data so register schema the filing

18
00:02:04,910 --> 00:02:15,490
dates will pass in the name the email and the password and then when it's successful we are going to

19
00:02:16,030 --> 00:02:18,180
return next.

20
00:02:18,290 --> 00:02:24,820
Next simply means everything was fine so move on to the controller and in a situation where it doesn't

21
00:02:24,820 --> 00:02:34,770
work out the catch then we are going to return a response that statues of 422 for validation failed

22
00:02:35,290 --> 00:02:37,110
and the Jason of error.

23
00:02:37,290 --> 00:02:45,580
So here we would receive an email from Yelp and would return that in the response so we also want to

24
00:02:45,580 --> 00:02:48,460
return this promise from them to it.

25
00:02:49,360 --> 00:02:52,060
OK so how do we use this middleware.

26
00:02:52,120 --> 00:02:57,360
We are going to come to our roots off and we are going to import the middle way.

27
00:02:57,640 --> 00:03:00,590
So imports register stuff detail

28
00:03:03,290 --> 00:03:13,740
from server snatch and validated us smash register and let's make sure in a bubble.

29
00:03:13,790 --> 00:03:16,420
See we have this server.

30
00:03:16,710 --> 00:03:18,250
A Yes we don't.

31
00:03:18,250 --> 00:03:29,840
So let's audit server is going to be server and we can have one bit off or validates all so I value

32
00:03:29,920 --> 00:03:43,440
details and this is going to point to server slash value details and in our we can juice this too funny

33
00:03:43,440 --> 00:03:46,260
details before the registration.

34
00:03:46,320 --> 00:03:50,580
Simply going to pass in the register every detail and that's it.

35
00:03:50,580 --> 00:03:57,840
Now we need to see the specific kind of email we get from Yelp to be able to handle this on the front

36
00:03:57,840 --> 00:03:57,990
end.

37
00:03:58,500 --> 00:04:01,840
So in our front end we have an error.

38
00:04:01,950 --> 00:04:04,730
Let's just restart ourselves so that it goes away.

39
00:04:06,580 --> 00:04:16,100
Stop the show up and starting their game NPM one death and now if I refresh click on Join now

40
00:04:19,480 --> 00:04:20,880
visit my network.

41
00:04:21,940 --> 00:04:29,960
Type in some fake details Oh and at the moment our form is always going to require the detail.

42
00:04:30,230 --> 00:04:34,580
So Foster to the backend validation which protects our API.

43
00:04:34,830 --> 00:04:42,130
Let's go to the client's stall off action and we are not going to pass the data.

44
00:04:42,610 --> 00:04:46,350
OK so this is just so we can test and see the validation from the server.

45
00:04:46,830 --> 00:04:48,480
So we are not going to positive data.

46
00:04:48,840 --> 00:04:51,840
What we are going to do is simply field a form

47
00:04:54,590 --> 00:04:58,210
even though we know the data is not going to be sent to the server.

48
00:04:58,250 --> 00:05:04,600
But this is just so we can positive first Faysal foundation that we can sign up and we can see a fortune.

49
00:05:04,770 --> 00:05:07,520
So look at the data and the way it comes from.

50
00:05:07,590 --> 00:05:13,770
Yup we have a message and we have a path so path is for password.

51
00:05:13,790 --> 00:05:17,000
A message is the message for that validation.

52
00:05:17,450 --> 00:05:22,040
So this is how we are going to handle this in the register detail.

53
00:05:22,150 --> 00:05:24,470
We are going to have an object.

54
00:05:24,470 --> 00:05:32,900
This is going to be the path and this is going to be ever the message so that we can have a specific

55
00:05:32,990 --> 00:05:36,780
object containing the key value pairs of all of our errors.

56
00:05:36,800 --> 00:05:44,130
So now now we first saw this little that can stop and I'm going to pass in Fig data again

57
00:05:47,200 --> 00:05:52,200
so if I click on sign up we can see we have password.

58
00:05:52,240 --> 00:05:53,650
The password is required.

59
00:05:54,340 --> 00:06:02,710
So in case a user is trying to connect to our API without using the clan site then API validation is

60
00:06:02,800 --> 00:06:03,890
on point.

61
00:06:03,940 --> 00:06:09,030
So at the moment we are validating to see that all the data is provided correctly.

62
00:06:09,080 --> 00:06:13,840
What about situations where the user already exists in the database and is still trying to register

63
00:06:13,840 --> 00:06:15,030
on the dot coms.

64
00:06:15,040 --> 00:06:18,100
To do that we are going to require I use our model.

65
00:06:18,100 --> 00:06:25,670
So import use user F1 models use

66
00:06:28,660 --> 00:06:29,310
next.

67
00:06:29,350 --> 00:06:31,340
We are going to try to find the user.

68
00:06:31,820 --> 00:06:35,790
But we are going to have about three different listed levels of the then.

69
00:06:35,830 --> 00:06:37,150
This is getting messy.

70
00:06:37,210 --> 00:06:41,110
So let's use I think a week for the best convenience.

71
00:06:41,110 --> 00:06:42,460
So we're going to have a try

72
00:06:48,830 --> 00:06:54,200
and register value is going to be called in try.

73
00:06:54,440 --> 00:07:02,540
So our register of on dates and our response 42 is going to be called in the catch and I'll delete this

74
00:07:03,590 --> 00:07:11,300
so try to validate on your day I was returned with this and now after trying to validate the normal

75
00:07:11,300 --> 00:07:19,190
data from the request we are going to try to validate if the user exists so existing user is going to

76
00:07:19,190 --> 00:07:20,960
be a call to wait.

77
00:07:20,960 --> 00:07:28,310
Use our model not find where the email is this email and let's find one.

78
00:07:28,310 --> 00:07:31,940
So this is going to try to find an existing user with that e-mail.

79
00:07:32,420 --> 00:07:43,170
And if the user is existing we are going to throw a new Yelp the validation error with all the properties

80
00:07:43,170 --> 00:07:45,120
that are required here.

81
00:07:45,210 --> 00:07:55,450
So for the validation error for us it takes in a message and this message is this user already exists.

82
00:07:55,570 --> 00:08:00,080
Second it takes in the detail we value data which is request up body.

83
00:08:00,110 --> 00:08:03,770
And thirdly it takes in the name of the path.

84
00:08:04,010 --> 00:08:11,040
And this is not supposed to be an object it's just down to the constructor of the value data.

85
00:08:11,170 --> 00:08:17,000
And finally it takes in the name of the path and would see it as email because it's to use all with

86
00:08:17,010 --> 00:08:19,300
this e-mail that already exists.

87
00:08:19,360 --> 00:08:23,110
Now what we do is we try to validate the scheme.

88
00:08:23,200 --> 00:08:26,500
Is there any I was going to return a 42.

89
00:08:26,530 --> 00:08:30,750
Then we try to find an existing use of that even and if there is.

90
00:08:30,790 --> 00:08:33,100
We thought a new Yelp validation error.

91
00:08:33,820 --> 00:08:35,770
Let's try this first.

92
00:08:35,830 --> 00:08:39,550
I'm going to register a valid account with my email

93
00:08:45,620 --> 00:08:50,340
people and sign up punishing we have an email on.

94
00:08:50,360 --> 00:08:55,300
That's because here we are defining error in the catch we are supposed to get.

95
00:08:55,550 --> 00:09:06,700
Sorry about that so let's try this again.

96
00:09:06,850 --> 00:09:12,060
You can sign up and we have a photo to the sensible entity.

97
00:09:12,160 --> 00:09:18,950
We have the password is required which means our validation works correctly but we are going to be agreeing

98
00:09:19,030 --> 00:09:25,960
to come to the actions and make sure we pass the data so that we can test the email unique validation

99
00:09:26,840 --> 00:09:27,950
plus inmate data

100
00:09:36,290 --> 00:09:37,510
and we have a 42.

101
00:09:37,590 --> 00:09:43,490
And you see this user exists already because I already have an account and you can see it's in the right

102
00:09:43,490 --> 00:09:44,160
format.

103
00:09:44,360 --> 00:09:48,920
Now we need to catch these errors and send them on our form.

104
00:09:48,920 --> 00:09:53,260
So in registered to you we are going to have a catch

105
00:09:57,540 --> 00:10:04,140
and this is going to give us the error and the first thing we do when we have an error is to toggle

106
00:10:04,260 --> 00:10:06,940
loading so that it stops really.

107
00:10:07,200 --> 00:10:13,860
Then we are going to look through each of the animals we have so object the keys for error

108
00:10:16,660 --> 00:10:18,620
response detail.

109
00:10:19,640 --> 00:10:24,600
And for each of them I'll call them feud.

110
00:10:25,050 --> 00:10:29,550
Then we are going to set it was I see this that I was at

111
00:10:32,230 --> 00:10:36,380
for a feud and he's going to be error response.

112
00:10:36,650 --> 00:10:53,460
The data for that feud and now if we try this out try to register a user.

113
00:10:53,670 --> 00:10:58,710
We have a 42 on for sensible entity and let's check our view component states

114
00:11:02,650 --> 00:11:11,630
if we see our errors we have this user already exist as one of the errors but the reason why it doesn't

115
00:11:11,640 --> 00:11:15,080
show in the form is because the error is not in the right form.

116
00:11:15,480 --> 00:11:21,660
Let's try to find out what the right format for an error is so it looks like it requires a field name

117
00:11:21,960 --> 00:11:24,050
and then it requires a message.

118
00:11:24,090 --> 00:11:33,090
So in a form that means you have a field which is the field and we are going to have Miss each which

119
00:11:33,090 --> 00:11:36,140
is our response.

120
00:11:36,150 --> 00:11:39,340
The data for that field.

121
00:11:39,440 --> 00:11:41,510
Now let's try this out.

122
00:11:41,590 --> 00:11:52,680
I'll pass in my email my name and my password and when I click on that we see this user already exists

123
00:11:52,910 --> 00:11:55,500
and that's coming directly from our API.

124
00:11:56,100 --> 00:12:03,990
OK so what exactly did we do with this piece of code object that case is going to give you an array

125
00:12:03,990 --> 00:12:05,670
of other keys in an object.

126
00:12:05,670 --> 00:12:13,440
So first we have error DOD response the data on this is equal to the object we receive from the API

127
00:12:13,800 --> 00:12:14,490
in this form.

128
00:12:16,680 --> 00:12:25,690
When we call object the keys on this object it gives us an array with all of the keys in this object.

129
00:12:25,780 --> 00:12:33,040
And this in this case just in then for each of the elements in these three we are going to call this

130
00:12:33,040 --> 00:12:39,110
the error was that at and we pass in an object.

131
00:12:39,150 --> 00:12:43,260
The first is field and fuel in this case is going to be email

132
00:12:46,450 --> 00:12:48,800
and the next is message on message.

133
00:12:48,820 --> 00:12:52,380
In this case is how all that responds the data of that feud.

134
00:12:52,460 --> 00:12:54,380
And in this case the key is email.

135
00:12:54,580 --> 00:12:59,640
So the response the are of email is this message right.

136
00:12:59,650 --> 00:12:59,870
Yeah.

137
00:13:02,630 --> 00:13:09,720
And that's exactly how we set the was to the form and then automatically seems view Justice reactive

138
00:13:09,990 --> 00:13:11,560
it displeased to ours.

139
00:13:11,660 --> 00:13:12,370
All right.

140
00:13:12,380 --> 00:13:13,520
That's validation.

141
00:13:13,520 --> 00:13:16,520
Handling both the front and then back in in application.
